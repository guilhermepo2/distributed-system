/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "services_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




File::~File() throw() {
}


void File::__set_creation(const time_t_def val) {
  this->creation = val;
}

void File::__set_modification(const time_t_def val) {
  this->modification = val;
}

void File::__set_version(const version_t val) {
  this->version = val;
}

void File::__set_name(const std::string& val) {
  this->name = val;
}

void File::__set_content(const std::string& val) {
  this->content = val;
}

uint32_t File::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creation);
          this->__isset.creation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->modification);
          this->__isset.modification = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t File::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("File");

  xfer += oprot->writeFieldBegin("creation", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->creation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modification", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->modification);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(File &a, File &b) {
  using ::std::swap;
  swap(a.creation, b.creation);
  swap(a.modification, b.modification);
  swap(a.version, b.version);
  swap(a.name, b.name);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

File::File(const File& other0) {
  creation = other0.creation;
  modification = other0.modification;
  version = other0.version;
  name = other0.name;
  content = other0.content;
  __isset = other0.__isset;
}
File& File::operator=(const File& other1) {
  creation = other1.creation;
  modification = other1.modification;
  version = other1.version;
  name = other1.name;
  content = other1.content;
  __isset = other1.__isset;
  return *this;
}
void File::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "File(";
  out << "creation=" << to_string(creation);
  out << ", " << "modification=" << to_string(modification);
  out << ", " << "version=" << to_string(version);
  out << ", " << "name=" << to_string(name);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


