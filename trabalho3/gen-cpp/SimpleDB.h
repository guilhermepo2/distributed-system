/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleDB_H
#define SimpleDB_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "services_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SimpleDBIf {
 public:
  virtual ~SimpleDBIf() {}
  virtual void get(File& _return, const std::string& url) = 0;
  virtual void get_list(std::vector<File> & _return, const std::string& url) = 0;
  virtual version_t add(const std::string& url, const std::string& content) = 0;
  virtual version_t update(const std::string& url, const std::string& content) = 0;
  virtual void delete_file(File& _return, const std::string& url) = 0;
  virtual version_t update_with_version(const std::string& url, const std::string& content, const version_t version) = 0;
  virtual void delete_with_version(File& _return, const std::string& url, const version_t version) = 0;
  virtual void update_server() = 0;
};

class SimpleDBIfFactory {
 public:
  typedef SimpleDBIf Handler;

  virtual ~SimpleDBIfFactory() {}

  virtual SimpleDBIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SimpleDBIf* /* handler */) = 0;
};

class SimpleDBIfSingletonFactory : virtual public SimpleDBIfFactory {
 public:
  SimpleDBIfSingletonFactory(const boost::shared_ptr<SimpleDBIf>& iface) : iface_(iface) {}
  virtual ~SimpleDBIfSingletonFactory() {}

  virtual SimpleDBIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SimpleDBIf* /* handler */) {}

 protected:
  boost::shared_ptr<SimpleDBIf> iface_;
};

class SimpleDBNull : virtual public SimpleDBIf {
 public:
  virtual ~SimpleDBNull() {}
  void get(File& /* _return */, const std::string& /* url */) {
    return;
  }
  void get_list(std::vector<File> & /* _return */, const std::string& /* url */) {
    return;
  }
  version_t add(const std::string& /* url */, const std::string& /* content */) {
    version_t _return = 0;
    return _return;
  }
  version_t update(const std::string& /* url */, const std::string& /* content */) {
    version_t _return = 0;
    return _return;
  }
  void delete_file(File& /* _return */, const std::string& /* url */) {
    return;
  }
  version_t update_with_version(const std::string& /* url */, const std::string& /* content */, const version_t /* version */) {
    version_t _return = 0;
    return _return;
  }
  void delete_with_version(File& /* _return */, const std::string& /* url */, const version_t /* version */) {
    return;
  }
  void update_server() {
    return;
  }
};

typedef struct _SimpleDB_get_args__isset {
  _SimpleDB_get_args__isset() : url(false) {}
  bool url :1;
} _SimpleDB_get_args__isset;

class SimpleDB_get_args {
 public:

  SimpleDB_get_args(const SimpleDB_get_args&);
  SimpleDB_get_args& operator=(const SimpleDB_get_args&);
  SimpleDB_get_args() : url() {
  }

  virtual ~SimpleDB_get_args() throw();
  std::string url;

  _SimpleDB_get_args__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const SimpleDB_get_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_get_pargs {
 public:


  virtual ~SimpleDB_get_pargs() throw();
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_get_result__isset {
  _SimpleDB_get_result__isset() : success(false) {}
  bool success :1;
} _SimpleDB_get_result__isset;

class SimpleDB_get_result {
 public:

  SimpleDB_get_result(const SimpleDB_get_result&);
  SimpleDB_get_result& operator=(const SimpleDB_get_result&);
  SimpleDB_get_result() {
  }

  virtual ~SimpleDB_get_result() throw();
  File success;

  _SimpleDB_get_result__isset __isset;

  void __set_success(const File& val);

  bool operator == (const SimpleDB_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_get_presult__isset {
  _SimpleDB_get_presult__isset() : success(false) {}
  bool success :1;
} _SimpleDB_get_presult__isset;

class SimpleDB_get_presult {
 public:


  virtual ~SimpleDB_get_presult() throw();
  File* success;

  _SimpleDB_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimpleDB_get_list_args__isset {
  _SimpleDB_get_list_args__isset() : url(false) {}
  bool url :1;
} _SimpleDB_get_list_args__isset;

class SimpleDB_get_list_args {
 public:

  SimpleDB_get_list_args(const SimpleDB_get_list_args&);
  SimpleDB_get_list_args& operator=(const SimpleDB_get_list_args&);
  SimpleDB_get_list_args() : url() {
  }

  virtual ~SimpleDB_get_list_args() throw();
  std::string url;

  _SimpleDB_get_list_args__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const SimpleDB_get_list_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_get_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_get_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_get_list_pargs {
 public:


  virtual ~SimpleDB_get_list_pargs() throw();
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_get_list_result__isset {
  _SimpleDB_get_list_result__isset() : success(false) {}
  bool success :1;
} _SimpleDB_get_list_result__isset;

class SimpleDB_get_list_result {
 public:

  SimpleDB_get_list_result(const SimpleDB_get_list_result&);
  SimpleDB_get_list_result& operator=(const SimpleDB_get_list_result&);
  SimpleDB_get_list_result() {
  }

  virtual ~SimpleDB_get_list_result() throw();
  std::vector<File>  success;

  _SimpleDB_get_list_result__isset __isset;

  void __set_success(const std::vector<File> & val);

  bool operator == (const SimpleDB_get_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_get_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_get_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_get_list_presult__isset {
  _SimpleDB_get_list_presult__isset() : success(false) {}
  bool success :1;
} _SimpleDB_get_list_presult__isset;

class SimpleDB_get_list_presult {
 public:


  virtual ~SimpleDB_get_list_presult() throw();
  std::vector<File> * success;

  _SimpleDB_get_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimpleDB_add_args__isset {
  _SimpleDB_add_args__isset() : url(false), content(false) {}
  bool url :1;
  bool content :1;
} _SimpleDB_add_args__isset;

class SimpleDB_add_args {
 public:

  SimpleDB_add_args(const SimpleDB_add_args&);
  SimpleDB_add_args& operator=(const SimpleDB_add_args&);
  SimpleDB_add_args() : url(), content() {
  }

  virtual ~SimpleDB_add_args() throw();
  std::string url;
  std::string content;

  _SimpleDB_add_args__isset __isset;

  void __set_url(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const SimpleDB_add_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_add_pargs {
 public:


  virtual ~SimpleDB_add_pargs() throw();
  const std::string* url;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_add_result__isset {
  _SimpleDB_add_result__isset() : success(false) {}
  bool success :1;
} _SimpleDB_add_result__isset;

class SimpleDB_add_result {
 public:

  SimpleDB_add_result(const SimpleDB_add_result&);
  SimpleDB_add_result& operator=(const SimpleDB_add_result&);
  SimpleDB_add_result() : success(0) {
  }

  virtual ~SimpleDB_add_result() throw();
  version_t success;

  _SimpleDB_add_result__isset __isset;

  void __set_success(const version_t val);

  bool operator == (const SimpleDB_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_add_presult__isset {
  _SimpleDB_add_presult__isset() : success(false) {}
  bool success :1;
} _SimpleDB_add_presult__isset;

class SimpleDB_add_presult {
 public:


  virtual ~SimpleDB_add_presult() throw();
  version_t* success;

  _SimpleDB_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimpleDB_update_args__isset {
  _SimpleDB_update_args__isset() : url(false), content(false) {}
  bool url :1;
  bool content :1;
} _SimpleDB_update_args__isset;

class SimpleDB_update_args {
 public:

  SimpleDB_update_args(const SimpleDB_update_args&);
  SimpleDB_update_args& operator=(const SimpleDB_update_args&);
  SimpleDB_update_args() : url(), content() {
  }

  virtual ~SimpleDB_update_args() throw();
  std::string url;
  std::string content;

  _SimpleDB_update_args__isset __isset;

  void __set_url(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const SimpleDB_update_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_update_pargs {
 public:


  virtual ~SimpleDB_update_pargs() throw();
  const std::string* url;
  const std::string* content;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_update_result__isset {
  _SimpleDB_update_result__isset() : success(false) {}
  bool success :1;
} _SimpleDB_update_result__isset;

class SimpleDB_update_result {
 public:

  SimpleDB_update_result(const SimpleDB_update_result&);
  SimpleDB_update_result& operator=(const SimpleDB_update_result&);
  SimpleDB_update_result() : success(0) {
  }

  virtual ~SimpleDB_update_result() throw();
  version_t success;

  _SimpleDB_update_result__isset __isset;

  void __set_success(const version_t val);

  bool operator == (const SimpleDB_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_update_presult__isset {
  _SimpleDB_update_presult__isset() : success(false) {}
  bool success :1;
} _SimpleDB_update_presult__isset;

class SimpleDB_update_presult {
 public:


  virtual ~SimpleDB_update_presult() throw();
  version_t* success;

  _SimpleDB_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimpleDB_delete_file_args__isset {
  _SimpleDB_delete_file_args__isset() : url(false) {}
  bool url :1;
} _SimpleDB_delete_file_args__isset;

class SimpleDB_delete_file_args {
 public:

  SimpleDB_delete_file_args(const SimpleDB_delete_file_args&);
  SimpleDB_delete_file_args& operator=(const SimpleDB_delete_file_args&);
  SimpleDB_delete_file_args() : url() {
  }

  virtual ~SimpleDB_delete_file_args() throw();
  std::string url;

  _SimpleDB_delete_file_args__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const SimpleDB_delete_file_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_delete_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_delete_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_delete_file_pargs {
 public:


  virtual ~SimpleDB_delete_file_pargs() throw();
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_delete_file_result__isset {
  _SimpleDB_delete_file_result__isset() : success(false) {}
  bool success :1;
} _SimpleDB_delete_file_result__isset;

class SimpleDB_delete_file_result {
 public:

  SimpleDB_delete_file_result(const SimpleDB_delete_file_result&);
  SimpleDB_delete_file_result& operator=(const SimpleDB_delete_file_result&);
  SimpleDB_delete_file_result() {
  }

  virtual ~SimpleDB_delete_file_result() throw();
  File success;

  _SimpleDB_delete_file_result__isset __isset;

  void __set_success(const File& val);

  bool operator == (const SimpleDB_delete_file_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_delete_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_delete_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_delete_file_presult__isset {
  _SimpleDB_delete_file_presult__isset() : success(false) {}
  bool success :1;
} _SimpleDB_delete_file_presult__isset;

class SimpleDB_delete_file_presult {
 public:


  virtual ~SimpleDB_delete_file_presult() throw();
  File* success;

  _SimpleDB_delete_file_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimpleDB_update_with_version_args__isset {
  _SimpleDB_update_with_version_args__isset() : url(false), content(false), version(false) {}
  bool url :1;
  bool content :1;
  bool version :1;
} _SimpleDB_update_with_version_args__isset;

class SimpleDB_update_with_version_args {
 public:

  SimpleDB_update_with_version_args(const SimpleDB_update_with_version_args&);
  SimpleDB_update_with_version_args& operator=(const SimpleDB_update_with_version_args&);
  SimpleDB_update_with_version_args() : url(), content(), version(0) {
  }

  virtual ~SimpleDB_update_with_version_args() throw();
  std::string url;
  std::string content;
  version_t version;

  _SimpleDB_update_with_version_args__isset __isset;

  void __set_url(const std::string& val);

  void __set_content(const std::string& val);

  void __set_version(const version_t val);

  bool operator == (const SimpleDB_update_with_version_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_update_with_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_update_with_version_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_update_with_version_pargs {
 public:


  virtual ~SimpleDB_update_with_version_pargs() throw();
  const std::string* url;
  const std::string* content;
  const version_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_update_with_version_result__isset {
  _SimpleDB_update_with_version_result__isset() : success(false) {}
  bool success :1;
} _SimpleDB_update_with_version_result__isset;

class SimpleDB_update_with_version_result {
 public:

  SimpleDB_update_with_version_result(const SimpleDB_update_with_version_result&);
  SimpleDB_update_with_version_result& operator=(const SimpleDB_update_with_version_result&);
  SimpleDB_update_with_version_result() : success(0) {
  }

  virtual ~SimpleDB_update_with_version_result() throw();
  version_t success;

  _SimpleDB_update_with_version_result__isset __isset;

  void __set_success(const version_t val);

  bool operator == (const SimpleDB_update_with_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_update_with_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_update_with_version_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_update_with_version_presult__isset {
  _SimpleDB_update_with_version_presult__isset() : success(false) {}
  bool success :1;
} _SimpleDB_update_with_version_presult__isset;

class SimpleDB_update_with_version_presult {
 public:


  virtual ~SimpleDB_update_with_version_presult() throw();
  version_t* success;

  _SimpleDB_update_with_version_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SimpleDB_delete_with_version_args__isset {
  _SimpleDB_delete_with_version_args__isset() : url(false), version(false) {}
  bool url :1;
  bool version :1;
} _SimpleDB_delete_with_version_args__isset;

class SimpleDB_delete_with_version_args {
 public:

  SimpleDB_delete_with_version_args(const SimpleDB_delete_with_version_args&);
  SimpleDB_delete_with_version_args& operator=(const SimpleDB_delete_with_version_args&);
  SimpleDB_delete_with_version_args() : url(), version(0) {
  }

  virtual ~SimpleDB_delete_with_version_args() throw();
  std::string url;
  version_t version;

  _SimpleDB_delete_with_version_args__isset __isset;

  void __set_url(const std::string& val);

  void __set_version(const version_t val);

  bool operator == (const SimpleDB_delete_with_version_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_delete_with_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_delete_with_version_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_delete_with_version_pargs {
 public:


  virtual ~SimpleDB_delete_with_version_pargs() throw();
  const std::string* url;
  const version_t* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_delete_with_version_result__isset {
  _SimpleDB_delete_with_version_result__isset() : success(false) {}
  bool success :1;
} _SimpleDB_delete_with_version_result__isset;

class SimpleDB_delete_with_version_result {
 public:

  SimpleDB_delete_with_version_result(const SimpleDB_delete_with_version_result&);
  SimpleDB_delete_with_version_result& operator=(const SimpleDB_delete_with_version_result&);
  SimpleDB_delete_with_version_result() {
  }

  virtual ~SimpleDB_delete_with_version_result() throw();
  File success;

  _SimpleDB_delete_with_version_result__isset __isset;

  void __set_success(const File& val);

  bool operator == (const SimpleDB_delete_with_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDB_delete_with_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_delete_with_version_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SimpleDB_delete_with_version_presult__isset {
  _SimpleDB_delete_with_version_presult__isset() : success(false) {}
  bool success :1;
} _SimpleDB_delete_with_version_presult__isset;

class SimpleDB_delete_with_version_presult {
 public:


  virtual ~SimpleDB_delete_with_version_presult() throw();
  File* success;

  _SimpleDB_delete_with_version_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SimpleDB_update_server_args {
 public:

  SimpleDB_update_server_args(const SimpleDB_update_server_args&);
  SimpleDB_update_server_args& operator=(const SimpleDB_update_server_args&);
  SimpleDB_update_server_args() {
  }

  virtual ~SimpleDB_update_server_args() throw();

  bool operator == (const SimpleDB_update_server_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SimpleDB_update_server_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_update_server_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_update_server_pargs {
 public:


  virtual ~SimpleDB_update_server_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_update_server_result {
 public:

  SimpleDB_update_server_result(const SimpleDB_update_server_result&);
  SimpleDB_update_server_result& operator=(const SimpleDB_update_server_result&);
  SimpleDB_update_server_result() {
  }

  virtual ~SimpleDB_update_server_result() throw();

  bool operator == (const SimpleDB_update_server_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SimpleDB_update_server_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDB_update_server_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SimpleDB_update_server_presult {
 public:


  virtual ~SimpleDB_update_server_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SimpleDBClient : virtual public SimpleDBIf {
 public:
  SimpleDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SimpleDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(File& _return, const std::string& url);
  void send_get(const std::string& url);
  void recv_get(File& _return);
  void get_list(std::vector<File> & _return, const std::string& url);
  void send_get_list(const std::string& url);
  void recv_get_list(std::vector<File> & _return);
  version_t add(const std::string& url, const std::string& content);
  void send_add(const std::string& url, const std::string& content);
  version_t recv_add();
  version_t update(const std::string& url, const std::string& content);
  void send_update(const std::string& url, const std::string& content);
  version_t recv_update();
  void delete_file(File& _return, const std::string& url);
  void send_delete_file(const std::string& url);
  void recv_delete_file(File& _return);
  version_t update_with_version(const std::string& url, const std::string& content, const version_t version);
  void send_update_with_version(const std::string& url, const std::string& content, const version_t version);
  version_t recv_update_with_version();
  void delete_with_version(File& _return, const std::string& url, const version_t version);
  void send_delete_with_version(const std::string& url, const version_t version);
  void recv_delete_with_version(File& _return);
  void update_server();
  void send_update_server();
  void recv_update_server();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SimpleDBProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SimpleDBIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SimpleDBProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_file(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_with_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_with_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SimpleDBProcessor(boost::shared_ptr<SimpleDBIf> iface) :
    iface_(iface) {
    processMap_["get"] = &SimpleDBProcessor::process_get;
    processMap_["get_list"] = &SimpleDBProcessor::process_get_list;
    processMap_["add"] = &SimpleDBProcessor::process_add;
    processMap_["update"] = &SimpleDBProcessor::process_update;
    processMap_["delete_file"] = &SimpleDBProcessor::process_delete_file;
    processMap_["update_with_version"] = &SimpleDBProcessor::process_update_with_version;
    processMap_["delete_with_version"] = &SimpleDBProcessor::process_delete_with_version;
    processMap_["update_server"] = &SimpleDBProcessor::process_update_server;
  }

  virtual ~SimpleDBProcessor() {}
};

class SimpleDBProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SimpleDBProcessorFactory(const ::boost::shared_ptr< SimpleDBIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SimpleDBIfFactory > handlerFactory_;
};

class SimpleDBMultiface : virtual public SimpleDBIf {
 public:
  SimpleDBMultiface(std::vector<boost::shared_ptr<SimpleDBIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SimpleDBMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SimpleDBIf> > ifaces_;
  SimpleDBMultiface() {}
  void add(boost::shared_ptr<SimpleDBIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(File& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, url);
    }
    ifaces_[i]->get(_return, url);
    return;
  }

  void get_list(std::vector<File> & _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_list(_return, url);
    }
    ifaces_[i]->get_list(_return, url);
    return;
  }

  version_t add(const std::string& url, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(url, content);
    }
    return ifaces_[i]->add(url, content);
  }

  version_t update(const std::string& url, const std::string& content) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(url, content);
    }
    return ifaces_[i]->update(url, content);
  }

  void delete_file(File& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_file(_return, url);
    }
    ifaces_[i]->delete_file(_return, url);
    return;
  }

  version_t update_with_version(const std::string& url, const std::string& content, const version_t version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_with_version(url, content, version);
    }
    return ifaces_[i]->update_with_version(url, content, version);
  }

  void delete_with_version(File& _return, const std::string& url, const version_t version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_with_version(_return, url, version);
    }
    ifaces_[i]->delete_with_version(_return, url, version);
    return;
  }

  void update_server() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_server();
    }
    ifaces_[i]->update_server();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SimpleDBConcurrentClient : virtual public SimpleDBIf {
 public:
  SimpleDBConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SimpleDBConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(File& _return, const std::string& url);
  int32_t send_get(const std::string& url);
  void recv_get(File& _return, const int32_t seqid);
  void get_list(std::vector<File> & _return, const std::string& url);
  int32_t send_get_list(const std::string& url);
  void recv_get_list(std::vector<File> & _return, const int32_t seqid);
  version_t add(const std::string& url, const std::string& content);
  int32_t send_add(const std::string& url, const std::string& content);
  version_t recv_add(const int32_t seqid);
  version_t update(const std::string& url, const std::string& content);
  int32_t send_update(const std::string& url, const std::string& content);
  version_t recv_update(const int32_t seqid);
  void delete_file(File& _return, const std::string& url);
  int32_t send_delete_file(const std::string& url);
  void recv_delete_file(File& _return, const int32_t seqid);
  version_t update_with_version(const std::string& url, const std::string& content, const version_t version);
  int32_t send_update_with_version(const std::string& url, const std::string& content, const version_t version);
  version_t recv_update_with_version(const int32_t seqid);
  void delete_with_version(File& _return, const std::string& url, const version_t version);
  int32_t send_delete_with_version(const std::string& url, const version_t version);
  void recv_delete_with_version(File& _return, const int32_t seqid);
  void update_server();
  int32_t send_update_server();
  void recv_update_server(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
