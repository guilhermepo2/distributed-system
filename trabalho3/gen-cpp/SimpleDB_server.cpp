// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SimpleDB.h"
#include "file_system/file_system.hpp"
#include "http/http.hpp"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <vector>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class SimpleDBHandler : virtual public SimpleDBIf {
 public:
  SimpleDBHandler() {
    // Your initialization goes here
  }

  void get(File& _return, const std::string& url) {

    Node * result = FileSystem::instance()->search(url);
    _return.creation = result->get_creation();
    _return.modification = result->get_modification();
    _return.version = result->get_version();
    _return.name = result->get_name();
    _return.content = result->get_data();

    printf("get\n");
  }

  void get_list(std::vector<File> & _return, const std::string& url) {
    Node * result = FileSystem::instance()->search(url);
    Node * aux;
    std::vector<File*> files;
    for(int i = 0; i < result->get_child_count(); i++)
    {
      aux = result->get_child(i);
      files.push_back(new File());
      files[i]->creation = aux->get_creation();
      files[i]->modification = aux->get_modification();
      files[i]->version = aux->get_version();
      files[i]->name = aux->get_name();
      files[i]->content = aux->get_data();

      _return.push_back(*(files[i]));
    }

    printf("get_list\n");
  }

  version_t add(const std::string& url, const std::string& content) {
    // Your implementation goes here
    std::cout << "url:" << url << std::endl;
    Node * result = FileSystem::instance()->insert(url, content);
    printf("add\n");
    return result->get_version();
  }

  version_t update(const std::string& url, const std::string& content) {
    Node * result = FileSystem::instance()->edit(url, content);
    printf("update\n");
    return result->get_version();
  }

  void delete_file(File& _return, const std::string& url) {
    Node * result = FileSystem::instance()->remove(url);

    _return.creation = result->get_creation();
    _return.modification = result->get_modification();
    _return.version = result->get_version();
    _return.name = result->get_name();
    _return.content = result->get_data();

    printf("delete_file\n");
  }

  version_t update_with_version(const std::string& url, const std::string& content, const version_t version) {
    Node * s = FileSystem::instance()->search(url);

    if(s->get_version() == version)
    {
      Node * result = FileSystem::instance()->edit(url, content);
      return result->get_version();
    }
    else
    {
      return -1;
    }

    printf("update_with_version\n");
  }

  void delete_with_version(File& _return, const std::string& url, const version_t version) {
    Node * s = FileSystem::instance()->search(url);

    if(s->get_version() == version)
    {
      Node * result = FileSystem::instance()->remove(url);

      _return.creation = result->get_creation();
      _return.modification = result->get_modification();
      _return.version = result->get_version();
      _return.name = result->get_name();
      _return.content = result->get_data();
    }
    printf("delete_with_version\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SimpleDBHandler> handler(new SimpleDBHandler());
  shared_ptr<TProcessor> processor(new SimpleDBProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
