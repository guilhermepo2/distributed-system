// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "defs.h"
#include "SimpleDB.h"
#include "file_system/file_system.hpp"
#include "http/http.hpp"
#include <thrift/transport/TSocket.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <vector>
#include <fstream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class SimpleDBHandler : virtual public SimpleDBIf {
private:
  std::vector<int> ports;
  int myPort;
 public:
  SimpleDBHandler(int port) {
    this->myPort = port;

    // appending my port to the ports file
    std::ofstream portsFileOutput;
    portsFileOutput.open(CONTROL_FILENAME, std::ios::app);
    portsFileOutput << port << "\n";
    portsFileOutput.close();

    std::ifstream portsFileInput(CONTROL_FILENAME);
    std::string line;
    if(portsFileInput.is_open())
      {
	while(getline(portsFileInput, line))
	  {
	    ports.push_back(atoi(line.c_str()));
	  }
      }
    portsFileInput.close();

    if(this->ports.size() > 1)
      {
	std::cout << "There are other servers running!" << std::endl;
	std::cout << "I Should tell them about me! :D" << std::endl;
	for(int i = 0; i < this->ports.size() - 1 ; i++) // the last port is me!
	  {
	    shared_ptr<TTransport> socket(new TSocket("localhost", this->ports[i]));
	    shared_ptr<TTransport> transport(new TBufferedTransport(socket));
	    shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
	    SimpleDBClient client(protocol);
	    transport->open();
	    client.update_server();
	    transport->close();
	  }
	std::cout << "Done! :D" << std::endl;
	
	// avisar aos outros servidores que mais um foi conectado
	// pra isso tem que criar mais um servico no thrift de atualizar de acordo
	// com o arquivo de controle
      }
    else
      {
	std::cout << "I'm alone :(" << std::endl;
      }

    #if DEBUG
    std::cout << "Server Created!" << std::endl;
    std::cout << "My Port: " << port << std::endl;
    std::cout << "Ports that I know: " << std::endl;
    for(int i = 0; i < this->ports.size(); i++)
      {
	std::cout << "Port " << i+1 << ": " << this->ports[i] << std::endl;
      }
    #endif
  }

  void get(File& _return, const std::string& url) {

    Node * result = FileSystem::instance()->search(url);
    _return.creation = result->get_creation();
    _return.modification = result->get_modification();
    _return.version = result->get_version();
    _return.name = result->get_name();
    _return.content = result->get_data();

    printf("get\n");
  }

  void get_list(std::vector<File> & _return, const std::string& url) {
    Node * result = FileSystem::instance()->search(url);
    Node * aux;
    std::vector<File*> files;
    for(int i = 0; i < result->get_child_count(); i++)
    {
      aux = result->get_child(i);
      files.push_back(new File());
      files[i]->creation = aux->get_creation();
      files[i]->modification = aux->get_modification();
      files[i]->version = aux->get_version();
      files[i]->name = aux->get_name();
      files[i]->content = aux->get_data();

      _return.push_back(*(files[i]));
    }

    printf("get_list\n");
  }

  version_t add(const std::string& url, const std::string& content) {
    // Your implementation goes here
    std::cout << "url:" << url << std::endl;
    Node * result = FileSystem::instance()->insert(url, content);
    printf("add\n");
    return result->get_version();
  }

  version_t update(const std::string& url, const std::string& content) {
    Node * result = FileSystem::instance()->edit(url, content);
    printf("update\n");
    return result->get_version();
  }

  void delete_file(File& _return, const std::string& url) {
    Node * result = FileSystem::instance()->remove(url);

    _return.creation = result->get_creation();
    _return.modification = result->get_modification();
    _return.version = result->get_version();
    _return.name = result->get_name();
    _return.content = result->get_data();

    printf("delete_file\n");
  }

  version_t update_with_version(const std::string& url, const std::string& content, const version_t version) {
    Node * s = FileSystem::instance()->search(url);

    if(s->get_version() == version)
    {
      Node * result = FileSystem::instance()->edit(url, content);
      return result->get_version();
    }
    else
    {
      return -1;
    }

    printf("update_with_version\n");
  }

  void delete_with_version(File& _return, const std::string& url, const version_t version) {
    Node * s = FileSystem::instance()->search(url);

    if(s->get_version() == version)
    {
      Node * result = FileSystem::instance()->remove(url);

      _return.creation = result->get_creation();
      _return.modification = result->get_modification();
      _return.version = result->get_version();
      _return.name = result->get_name();
      _return.content = result->get_data();
    }
    printf("delete_with_version\n");
  }

    void update_server() {
      std::cout << "=========================================" << std::endl;
      std::cout << "A new friend joined the server!" << std::endl;
      std::cout << "Let's see who it is!" << std::endl;

      this->ports.clear();
      std::ifstream portsFileInput(CONTROL_FILENAME);
      std::string line;
      if(portsFileInput.is_open())
	{
	  while(getline(portsFileInput, line))
	    {
	      ports.push_back(atoi(line.c_str()));
	    }
	}
      portsFileInput.close();

      std::cout << "Ports that I know: " << std::endl;
      for(int i = 0; i < this->ports.size(); i++)
	{
	  std::cout << "Port " << i+1 << ": " << this->ports[i] << std::endl;
	}
      std::cout << "=========================================" << std::endl;
  }

};

int main(int argc, char **argv) {
  int port = atoi(argv[1]);
  shared_ptr<SimpleDBHandler> handler(new SimpleDBHandler(port));
  shared_ptr<TProcessor> processor(new SimpleDBProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();



  std::cout << "ay lmao" << std::endl;
  return 0;
}
